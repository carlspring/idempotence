name: Create Release

on:
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Version for the release (e.g., 1.0.0, 1.0.0-rc-1)'
        required: false
      next_development_version:
        description: 'Next development version (e.g., 1.0.1-SNAPSHOT)'
        required: false

permissions:
  contents: write
  packages: write  # Needed if publishing to GitHub Packages

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensure all history and tags are fetched

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          cache: 'maven'
          distribution: 'temurin'
          java-version: '21'
          server-id: central
          server-username: ${{ secrets.MAVEN_CENTRAL_USERNAME }}
          server-password: ${{ secrets.MAVEN_CENTRAL_PASSWORD }}
          gpg-private-key: ${{ secrets.MAVEN_CENTRAL_GPG_PRIVATE_KEY }}
          gpg-passphrase: ${{ secrets.MAVEN_CENTRAL_GPG_PASSPHRASE }}

      - name: Determine Release Version
        id: determine_version
        run: |
          if [ -z "${{ github.event.inputs.release_version }}" ]; then
            echo "No release_version input provided. Computing next version..."

            # Get the latest tag
            latest_tag=$(git describe --tags $(git rev-list --tags --max-count=1) 2>/dev/null)
            echo "Latest tag: $latest_tag"

            if [ -z "$latest_tag" ]; then
              # No previous tags exist; start with initial version
              release_version="1.0.0"
            else
              # Extract version components based on Maven versioning rules
              version_pattern='^([0-9]+)\.([0-9]+)\.([0-9]+)(-.+)?$'
              if [[ "$latest_tag" =~ $version_pattern ]]; then
                major="${BASH_REMATCH[1]}"
                minor="${BASH_REMATCH[2]}"
                patch="${BASH_REMATCH[3]}"
                suffix="${BASH_REMATCH[4]}"

                echo "Version components - Major: $major, Minor: $minor, Patch: $patch, Suffix: $suffix"

                if [[ -n "$suffix" ]]; then
                  # Handle pre-release versions (e.g., -rc-1, -milestone-1)
                  suffix_pattern='^-(.+)-([0-9]+)$'
                  if [[ "$suffix" =~ $suffix_pattern ]]; then
                    suffix_type="${BASH_REMATCH[1]}"
                    suffix_number="${BASH_REMATCH[2]}"
                    next_suffix_number=$((suffix_number + 1))
                    release_version="${major}.${minor}.${patch}-${suffix_type}-${next_suffix_number}"
                  else
                    # Unrecognized suffix format; increment patch version
                    next_patch=$((patch + 1))
                    release_version="${major}.${minor}.${next_patch}"
                  fi
                else
                  # No suffix; increment patch version
                  next_patch=$((patch + 1))
                  release_version="${major}.${minor}.${next_patch}"
                fi
              else
                echo "Latest tag does not match expected version pattern. Defaulting to 1.0.0."
                release_version="1.0.0"
              fi
            fi
          else
            echo "Using provided release_version input: ${{ github.event.inputs.release_version }}"
            release_version="${{ github.event.inputs.release_version }}"
          fi

          echo "Release version: $release_version"
          echo "release_version=$release_version" >> $GITHUB_OUTPUT

      - name: Determine Next Development Version
        id: determine_next_version
        run: |
          if [ -z "${{ github.event.inputs.next_development_version }}" ]; then
            # Assume next development version is release version incremented by patch and with -SNAPSHOT
            version_pattern='^([0-9]+)\.([0-9]+)\.([0-9]+)'
            if [[ "${{ steps.determine_version.outputs.release_version }}" =~ $version_pattern ]]; then
              major="${BASH_REMATCH[1]}"
              minor="${BASH_REMATCH[2]}"
              patch="${BASH_REMATCH[3]}"
              next_patch=$((patch + 1))
              next_development_version="${major}.${minor}.${next_patch}-SNAPSHOT"
            else
              # Default to 1.0.1-SNAPSHOT
              next_development_version="1.0.1-SNAPSHOT"
            fi
          else
            next_development_version="${{ github.event.inputs.next_development_version }}"
          fi

          echo "Next development version: $next_development_version"
          echo "next_development_version=$next_development_version" >> $GITHUB_OUTPUT

      - name: Update POM Version to Release Version
        run: |
          mvn versions:set -DnewVersion=${{ steps.determine_version.outputs.release_version }} -DprocessAllModules=true -DgenerateBackupPoms=false

      - name: Commit Release Version
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git commit -am "Release version ${{ steps.determine_version.outputs.release_version }}"

      - name: Build and Deploy Artifacts
        env:
          MAVEN_CENTRAL_USERNAME: ${{ secrets.MAVEN_CENTRAL_USERNAME }}
          MAVEN_CENTRAL_PASSWORD: ${{ secrets.MAVEN_CENTRAL_PASSWORD }}
          MAVEN_CENTRAL_GPG_PASSPHRASE: ${{ secrets.MAVEN_CENTRAL_GPG_PASSPHRASE }}
        run: |
           mvn -s ./.github/settings.xml clean deploy -DskipTests=false

      - name: Create Git Tag
        run: |
          git tag ${{ steps.determine_version.outputs.release_version }}
          git push origin ${{ steps.determine_version.outputs.release_version }}

      - name: Update POM Version to Next Development Version
        env:
          MAVEN_CENTRAL_USERNAME: ${{ secrets.MAVEN_CENTRAL_USERNAME }}
          MAVEN_CENTRAL_PASSWORD: ${{ secrets.MAVEN_CENTRAL_PASSWORD }}
          MAVEN_CENTRAL_GPG_PASSPHRASE: ${{ secrets.MAVEN_CENTRAL_GPG_PASSPHRASE }}
        run: |
          mvn versions:set -DnewVersion=${{ steps.determine_next_version.outputs.next_development_version }} -DprocessAllModules=true -DgenerateBackupPoms=false
          mvn -s ./.github/settings.xml clean deploy -DskipTests=false

      - name: Commit Next Development Version
        run: |
          git commit -am "Prepare for next development iteration"
          git push origin HEAD:${{ github.ref }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.determine_version.outputs.release_version }}
          name: ${{ steps.determine_version.outputs.release_version }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
